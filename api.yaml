AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  apiGatewayName:
      Type: String
      Default: my-api
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: dev
  firstLambda:
    Type: String
    Default: "create-todo-fn"
  secondLambda:
    Type: String
    Default: "read-todo-fn"
  DateTime:
    Type: String
    Description: 'Timer to trigger update'

Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API Gateway for Todo Task Management
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  TaskResource:
    Type: "AWS::ApiGateway::Resource"
    Properties: 
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: "task"

  apiGatewayPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${firstLambda}
      ResourceId: !Ref TaskResource
      RestApiId: !Ref apiGateway

  apiGatewayGETMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${secondLambda}
      ResourceId: !Ref TaskResource
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - apiGatewayGETMethod
      - apiGatewayPOSTMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  lambdaApiGatewayInvokeFirstLambda:
    Type: AWS::Lambda::Permission
    DependsOn:
      - apiGatewayPOSTMethod
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${firstLambda}
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*

  lambdaApiGatewayInvokeSecondLambda:
    Type: AWS::Lambda::Permission
    DependsOn:
      - apiGatewayGETMethod
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${secondLambda}
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*



Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}
